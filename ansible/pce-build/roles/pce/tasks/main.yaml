---
- name: Gather the RPM package facts
  package_facts:
    manager: auto
  tags:
    - always

- name: "Stop iptables service"
  service:
    name: iptables
    state: stopped
    enabled: false
  when: "'iptables-services' in ansible_facts.packages"
  tags:
    - pce-install

- name: "Stop firewalld service."
  service:
    name: firewalld
    state: stopped
    enabled: false
  when: "'firewalld' in ansible_facts.packages"
  tags:
    - pce-install

- name: "Set SELinux to permissive and disable on reboot."
  selinux:
    state: disabled
  tags:
    - pce-install

- name: "Configure Kernel Parameters"
  blockinfile:
    dest: /etc/sysctl.conf
    block: |
      kernel.shmmax = 60000000
      vm.overcommit_memory = 1
      fs.file-max = 100000
      net.core.somaxconn = 16384
  tags:
    - pce-install

- name: "Update Security Limits"
  blockinfile:
    dest: /etc/security/limits.conf
    block: |
      *               soft    core            unlimited
      *               hard    core            unlimited
  when: node_type  in ['data1','data0']
  tags:
    - pce-install

- name: "Update Security Limits"
  blockinfile:
    dest: /etc/security/limits.conf
    block: |
      *               soft    core            unlimited
      *               hard    core            unlimited
      *               hard    nproc           65535
      *               soft    nproc           65535
      *               hard    nofile          65535
      *               soft    nofile          65535
  when: node_type  in ['core','snc0']
  tags:
    - pce-install

- name: "Apply kernel configuration"
  command: sysctl -p
  tags:
    - pce-install

- name: "Configure alias file"
  blockinfile:
    dest: /etc/profile.d/global_aliases.sh
    create: yes
    block: |
      # Illumio-specific aliases and functions
      alias check="sudo -u ilo-pce /opt/illumio-pce/illumio-pce-env check"
      alias ctl="sudo -u ilo-pce /opt/illumio-pce/illumio-pce-ctl"
      alias db="sudo -u ilo-pce /opt/illumio-pce/illumio-pce-db-management"
  tags:
    - pce-install

- name: "Copy PCE RPM to all nodes"
  copy:
    src: /home/centos/ansible/pce-build/roles/pce/files/{{ pce.rpm | basename }}
    dest: /tmp/
  tags:
    - pce-install

- name: "Copy UI RPM core and snc nodes"
  copy:
    src: /home/centos/ansible/pce-build/roles/pce/files/{{ pce.ui_rpm | basename }}
    dest: /tmp/
  when: node_type in ['core0', 'core1', 'snc0']
  tags:
    - pce-install

- name: "Install PCE rpm to all nodes"
  yum:
    name: /tmp/{{ pce.rpm | basename }}
    state: present
  tags:
    - pce-install

- name: "Install PCE UI rpm to core and snc nodes"
  yum:
    name: /tmp/{{ pce.ui_rpm | basename }}
    state: present
  when: node_type in ['core0', 'core1', 'snc0']
  tags:
    - pce-install

- name: "Copy private key to /var/lib/illumio-pce/cert/"
  copy:
    src: /home/centos/ansible/pce-build/roles/pce/files/{{ pce.cert | basename }}
    dest: /var/lib/illumio-pce/cert/{{ pce.cert | basename }}
    owner: ilo-pce
    group: ilo-pce
    mode: "0400"
  tags:
    - pce-install

- name: "Copy cert bundle to /var/lib/illumio-pce/cert/"
  copy:
    src: /home/centos/ansible/pce-build/roles/pce/files/{{ pce.key | basename }}
    dest: /var/lib/illumio-pce/cert/{{ pce.key | basename }}
    owner: ilo-pce
    group: ilo-pce
    mode: "0440"
  tags:
    - pce-install

- name: "Get public IP"
  ipify_facts:
    api_url: https://api.ipify.org
  when: node_type in ['core0', 'core1', 'snc0']
  register: public_ip
  tags:
    - pce-install

- name: "Copy runtime_env.yml template to PCE"
  template:
    src: ./runtime_env.yml.j2
    dest: /etc/illumio-pce/runtime_env.yml
    owner: ilo-pce
    group: ilo-pce
  tags:
    - pce-install

- name: "Running illumio-pce-env check before starting cluster"
  command: /opt/illumio-pce/illumio-pce-env check
  become: yes
  become_user: ilo-pce
  args:
    chdir: /tmp/
  tags:
    - pce-install

- name: "Running illumio-pce-env status to make sure its not running already"
  command: /opt/illumio-pce/illumio-pce-ctl status -x
  become: yes
  become_user: ilo-pce
  register: pce_status
  failed_when: pce_status.rc == 2 or  pce_status.rc > 3
  args:
    chdir: /tmp/
  tags:
    - pce-install

- name: start pce at runlevel 1
  command: illumio-pce-ctl start -d --yes-to-db-upgrade --runlevel 1
  become: yes
  become_user: ilo-pce
  register: start_followers
  until: start_followers.rc == 0
  retries: 1
  args:
    chdir: /tmp/
  tags:
    - pce-install

- name: wait for the pce to start
  command: illumio-pce-ctl status -w 180
  become: yes
  become_user: ilo-pce
  register: command_result
  until: command_result.rc == 1
  failed_when: command_result.rc == 0 or 'STOPPED' in command_result.stdout # -x only works in runlevel 5, don't add it
  retries: 1
  args:
    chdir: /tmp/
  tags:
    - pce-install

- name: "Setting up DB with illumio-pce-db-management"
  command: /opt/illumio-pce/illumio-pce-db-management setup
  become: yes
  become_user: ilo-pce
  when: node_type  in ['data0','snc0']
  args:
    chdir: /tmp/
  tags:
    - pce-install

- name: "Starting cluster with illumio-pce-ctl set-runlevel 5"
  command: /opt/illumio-pce/illumio-pce-ctl set-runlevel 5
  become: yes
  become_user: ilo-pce
  when: node_type in ['core0','snc0']
  args:
    chdir: /tmp/
  tags:
    - pce-install

- name: wait for the pce to start
  command: illumio-pce-ctl status -w 180
  become: yes
  become_user: ilo-pce
  register: command_result
  until: command_result.rc == 1
  failed_when: command_result.rc == 0 or 'STOPPED' in command_result.stdout # -x only works in runlevel 5, don't add it
  retries: 1
  args:
    chdir: /tmp/
  tags:
    - pce-install

- name: "Creating org and adding first user with illumio-pce-db-management"
  command: /opt/illumio-pce/illumio-pce-db-management create-domain --user-name {{ pce.user_email }} --full-name {{ pce.user_full_name }} --org-name {{ pce.org_name }}
  environment:
    ILO_PASSWORD: "{{ pce.user_pwd }}"
  become: yes
  become_user: ilo-pce
  ignore_errors: True
  when: node_type in ['core0','snc0']
  args:
    chdir: /tmp/
  tags:
    - pce-install

- name: "Copy VEN Bundle to PCE"
  copy:
    src: /home/centos/ansible/pce-build/roles/pce/files/{{ pce.ven_bundle | basename }}
    dest: /tmp/
  when: node_type in ['core0','snc0']
  tags:
    - pce-install
    - ven-bundle-install

- name: "Install VEN Bundle"
  command: /opt/illumio-pce/illumio-pce-ctl ven-software-install /tmp/{{ pce.ven_bundle | basename }} --default --orgs all --no-prompt
  become: yes
  become_user: ilo-pce
  when: node_type in ['core0','snc0']
  args:
    chdir: /tmp/
  tags:
    - pce-install
    - ven-bundle-install

# Harden the PCE with ilo-pipgen - MNC and SNC
- name: Make sure sure iptables-services is installed
  package:
    name: iptables-services
    state: present
  tags:
    - ilo-pipgen
    - hardening

- name: Disable and mask firewalld
  systemd:
    name: firewalld
    enabled: no
    masked: yes
    state: stopped
  when: "'firewalld' in ansible_facts.packages"
  tags:
    - ilo-pipgen
    - hardening

- name: Enable iptables
  systemd:
    name: iptables
    enabled: yes
    state: started
  tags:
    - ilo-pipgen
    - hardening

- name: Enable ip6tables
  systemd:
    name: ip6tables
    enabled: yes
    state: started
  tags:
    - ilo-pipgen
    - hardening

- name: Create /var/tmp/illumio-pipgen on each node_type if it does not exist
  file:
    path: /var/tmp/illumio-pipgen
    state: directory
  when: node_type in ['core0','snc0']
  tags:
    - ilo-pipgen
    - hardening

- name: Copy the ilo-pipgen script to the directory
  copy:
    src: ilo-pipgen
    dest: /var/tmp/illumio-pipgen
    mode: a+x
  when: node_type in ['core0','snc0']
  tags:
    - ilo-pipgen
    - hardening

- name: Create file with ip addresses
  template:
    src: ip_addrs_input.txt.j2
    dest: /var/tmp/illumio-pipgen/ip_addrs_input.txt
  when: node_type in ['core0','snc0']
  tags:
    - ilo-pipgen
    - hardening

- name: Execute ilo-pipgen script
  script:
    cmd: ./ilo-pipgen -i ip_addrs_input.txt -o iptables -p {{ pce.front_end_https_port }},{{ pce.front_end_event_service_port }}
    chdir: /var/tmp/illumio-pipgen/
  when: node_type in ['core0','snc0']
  tags:
    - ilo-pipgen
    - hardening

- name: Download iptables to ansible server
  fetch:
    src: /var/tmp/illumio-pipgen/iptables
    dest: roles/pce/files/iptables
    flat: yes
  when: node_type in ['core0','snc0']
  tags:
    - ilo-pipgen
    - hardening

- name: Copy the output to iptables
  copy:
    src: iptables
    dest: /etc/sysconfig/iptables
    backup: yes
  become: yes
  tags:
    - ilo-pipgen
    - hardening

- name: Restart the iptables service
  service:
    name: iptables
    state: restarted
  become: yes
  tags:
    - ilo-pipgen
    - hardening

# Harden the PCE with ilo-vpngen - MNC only
- name: Check if we a swan package is installed
  command: rpm -qa | grep swan
  register: swan_check
  when: node_type != "snc0"

- name: End ansible build if swan package is installed
  meta: end_play
  when:
    - node_type != "snc0"
    - swan_check.rc != 0
  tags:
    - ilo-vpngen
    - hardening

- name: Download libreswan RPM
  get_url:
    url: https://download.libreswan.org/binaries/rhel/7/x86_64/libreswan-3.31-1.el7_7.x86_64.rpm
    dest: /tmp/libreswan-3.31-1.el7_7.x86_64.rpm
  when: node_type != "snc0"
  tags:
    - ilo-vpngen
    - hardening

- name: "Install Libreswan RPM"
  yum:
    name: /tmp/libreswan-3.31-1.el7_7.x86_64.rpm
    state: present
  when: node_type != "snc0"
  tags:
    - ilo-vpngen
    - hardening

- name: Create /var/tmp/illumio-vpngen on each node_type if it does not exist
  file:
    path: /var/tmp/illumio-vpngen
    state: directory
  when: node_type == "core0"
  tags:
    - ilo-vpngen
    - hardening

- name: Copy the ilo-vpngen script to the directory
  copy:
    src: ilo-vpngen
    dest: /var/tmp/illumio-vpngen
    mode: a+x
  when: node_type == "core0"
  tags:
    - ilo-vpngen
    - hardening

- name: Create file with ip addresses
  template:
    src: ip_addrs_input.txt.j2
    dest: /var/tmp/illumio-vpngen/ip_addrs_input.txt
  when: node_type == "core0"
  tags:
    - ilo-vpngen
    - hardening

- name: Execute ilo-vpngen script
  command: ./ilo-vpngen -i ip_addrs_input.txt -o deploy_vpn.sh
  args:
    chdir: /var/tmp/illumio-vpngen/
  when: node_type == "core0"
  tags:
    - ilo-vpngen
    - hardening

- name: Download the deploy_vpn.sh to ansible server
  fetch:
    src: /var/tmp/illumio-vpngen/deploy_vpn.sh
    dest: roles/pce/files/deploy_vpn.sh
    flat: yes
  when: node_type == "core0"
  tags:
    - ilo-vpngen
    - hardening

- name: Send deploy_vpn.sh to all servers
  copy:
    src: deploy_vpn.sh
    dest: /tmp/deploy_vpn.sh
    mode: a+x
  when: node_type != "snc0"
  tags:
    - ilo-vpngen
    - hardening

- name: Make sure packages are installed
  become: yes
  yum:
    name: "{{ packages }}"
  vars:
    packages:
      - ldns
      - libevent
      - nss
      - nss-tools
      - unbound-libs
      - libpcap
      - nspr
      - nss-softokn
      - nss-softokn-freebl
      - nss-sysinit
      - nss-util
  when: node_type != "snc0"
  tags:
    - ilo-vpngen
    - hardening

- name: Execute deploy_vpn.sh script
  command: ./deploy_vpn.sh
  when: node_type != "snc0"
  become: yes
  args:
    chdir: /tmp/
  tags:
    - ilo-vpngen
    - hardening

- name: Start IPSec Service on all nodes
  systemd:
    name: ipsec
    enabled: yes
    state: started
  when: node_type != "snc0"
  tags:
    - ilo-vpngen
    - hardening
